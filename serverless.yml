service: elasticpypi

provider:
  name: aws
  runtime: python2.7
  memorySize: 128
  profile: ${file(elasticpypi/config.json):profile}
  stage: dev
  # profile: "some-local-aws-config-profile"
  # region: us-east-1

  environment:
    service: ${self:service}
    stage: "/${self:provider.stage}"
    bucket: "elasticpypi"             # CHANGE ME
    table: "elasticpypi"
    username: "elasticpypi"
    password: "something-secretive"   # CHANGE ME
    overwrite: false  # Only applies to the local server. If true will overwrite packages

plugins:
  - serverless-wsgi

functions:
  api:
    handler: wsgi.handler
    events:
      - http:
          path: simple
          method: get
          integration: lambda-proxy
      - http:
          path: simple
          method: post
          integration: lambda-proxy
      - http:
          path: simple/{name}
          method: get
          integration: lambda-proxy
      - http:
          path: packages/{name}
          method: get
          integration: lambda-proxy
  s3:
    handler: elasticpypi.handler.s3
    events:
      - s3:
          bucket: ${file(elasticpypi/config.json):bucket}
          event: s3:ObjectRemoved:*
      - s3:
          bucket: ${file(elasticpypi/config.json):bucket}
          event: s3:ObjectCreated:*

custom:
  wsgi:
    app: elasticpypi.api.app

resources:
 Resources:
   packagesTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: ${file(elasticpypi/config.json):table}
       AttributeDefinitions:
         -
           AttributeName: "package_name"
           AttributeType: S
         -
           AttributeName: "version"
           AttributeType: S
         -
           AttributeName: "normalized_name"
           AttributeType: S
       KeySchema:
         -
           AttributeName: "package_name"
           KeyType: HASH
         -
           AttributeName: "version"
           KeyType: RANGE
       GlobalSecondaryIndexes:
         -
           IndexName: "normalized_name-index"
           KeySchema:
             -
               AttributeName: "normalized_name"
               KeyType: HASH
           Projection:
               ProjectionType: ALL
           ProvisionedThroughput:
               ReadCapacityUnits: 1
               WriteCapacityUnits: 1
       ProvisionedThroughput:
         ReadCapacityUnits: 1
         WriteCapacityUnits: 1
   DynamoDBIamPolicy:
     Type: AWS::IAM::Policy
     DependsOn: packagesTable
     Properties:
       PolicyName: ${file(elasticpypi/config.json):service}-lambda-dynamodb
       PolicyDocument:
         Version: '2012-10-17'
         Statement:
           - Effect: Allow
             Action:
               - dynamodb:GetItem
               - dynamodb:PutItem
               - dynamodb:DeleteItem
               - dynamodb:Query
               - dynamodb:Scan
             Resource:
               - arn:aws:dynamodb:*:*:table/${file(elasticpypi/config.json):table}
               - arn:aws:dynamodb:*:*:table/${file(elasticpypi/config.json):table}/*
       Roles:
         - Ref: IamRoleLambdaExecution
   S3IamPolicy:
     Type: AWS::IAM::Policy
     Properties:
       PolicyName: ${file(elasticpypi/config.json):service}-lambda-s3
       PolicyDocument:
         Version: '2012-10-17'
         Statement:
           - Effect: Allow
             Action: s3:GetObject
             Resource: arn:aws:s3:::${file(elasticpypi/config.json):bucket}/*
       Roles:
         - Ref: IamRoleLambdaExecution
